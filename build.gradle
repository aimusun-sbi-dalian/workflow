plugins {
    id 'java'
    id 'idea'
    id 'com.diffplug.spotless' version '6.12.0'
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
}

allprojects {
    group = 'com.sbi.expo'
    version = '0.1.0'
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin:'java'
    apply plugin:'idea'
    apply plugin:'com.diffplug.spotless'
    apply plugin:'org.springframework.boot'
    apply plugin:'io.spring.dependency-management'

    // Cooperate with `io.spring.dependency-management` plugin to let subproject import dependency without defining version number
    dependencyManagement {
        imports {
            // `spring-boot-dependencies` defines many dependency versions
            // versions: https://docs.spring.io/spring-boot/docs/2.7.0/reference/html/dependency-versions.html#appendix.dependency-versions
            mavenBom "org.springframework.boot:spring-boot-dependencies:${libs.versions.springboot.get()}"
        }
    }

    dependencies {
        // spring boot
        implementation 'org.springframework.boot:spring-boot-starter'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        compileOnly(libs.jetbrains.annotations)
    }

    spotless {
        java {
            importOrder()
            removeUnusedImports()
            trimTrailingWhitespace()
            googleJavaFormat("${libs.versions.google.java.format.get()}").aosp()
            formatAnnotations()
            endWithNewline()
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    compileJava.dependsOn 'spotlessApply'
}
